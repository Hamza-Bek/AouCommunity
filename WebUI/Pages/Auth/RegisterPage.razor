@page "/register"
@using Microsoft.AspNetCore.Components.Authorization
@inject IAccountRepository AccountService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IValidator<CreateAccountDto> Validator

<div class="container-fluid">
    <EditForm class="form" Model="@NewUser" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator/>
        <FluentValidationValidator Validator="Validator" />
        <div class="container-fluid">
            <img src="img/aoulogo.png" alt="Welcome Image" class="welcome-image mb-3"/>
            <h4 class="text-center">Create an Account</h4>

            <div class="mb-3 mt-2">
                <label for="username" class="form-label">Username</label>
                <InputText type="text" class="form-control" id="username" @bind-Value="@NewUser.Name"/>
                <ValidationMessage For="@(() => @NewUser.Name)"/>
            </div>

            <div class="mb-3 mt-2">
                <label for="email" class="form-label">Email</label>
                <InputText type="email" class="form-control" id="email" @bind-Value="@NewUser.Email"/>
                <ValidationMessage For="@(()=>@NewUser.Email)" />
            </div>

            <div class="mb-3 mt-2">
                <label for="password" class="form-label">Password</label>
                <InputText type="password" class="form-control" id="password" @bind-Value="@NewUser.Password"/>
                <ValidationMessage For="@(()=>@NewUser.Password)"/>
            </div>

            <div class="mb-3 mt-2">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <InputText type="password" class="form-control" id="confirmPassword" @bind-Value="@NewUser.ConfirmPassword"/>
                <ValidationMessage For="@(()=>@NewUser.ConfirmPassword)"/>

                <button type="submit" class="btn btn-primary mt-4">Register</button>
            </div>
            </div>
    </EditForm>
</div>

@code {
    private CreateAccountDto NewUser { get; set; } = new();
    
    private async Task HandleRegistration()
    {
        
        var result = await AccountService.CreateAccountAsync(NewUser);

        if (result.Flag)
        {
            var responseLogin = await AccountService.LoginAccountAsync(NewUser);
            
            if (responseLogin.Flag)
            {
                var customAuthStateProvider = (CustomAuthenticationProvider)AuthStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new LocalStorageDto()
                {
                   Token =  responseLogin.Token,
                   Refresh = responseLogin.RefreshToken
                });
            }
            Navigation.NavigateTo("/verify/account");
        }

    }
}