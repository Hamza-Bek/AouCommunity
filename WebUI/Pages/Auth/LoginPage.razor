@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@inject IAccountRepository _account
@inject NavigationManager _navigation
@inject AuthenticationStateProvider AuthStateProvider

<div class="container-fluid">
    <EditForm class="form" Model="@User"  OnValidSubmit="HandleLogin">
        <img src="img/aoulogo.png" alt="Welcome Image" class="welcome-image mb-3" />
        <h4 class="text-center">Welcome, Back!</h4>
        <div class="mb-3 mt-5">
            <label for="email" class="form-label">Email address</label>
            <InputText type="email" class="form-control" id="email" @bind-Value="email" aria-describedby="emailHelp" />
        </div>
        <div class="mb-3 mt-5">
            <label for="password" class="form-label">Password</label>
            <InputText type="password" class="form-control" id="password" @bind-Value="password" />
        </div>
        <button type="submit" class="btn btn-primary mt-4">Login</button>
    </EditForm>
</div>




@* *@
@* *@
@* <EditForm Model="@User" OnValidSubmit="HandleLogin"> *@
@*     <DataAnnotationsValidator/> *@
@*     <ValidationSummary/> *@
@*      *@
@*     <div class="form-group"> *@
@*         <label for="email">Email</label> *@
@*         <InputText id="email" class="form-group" @bind-Value="User.Email" ></InputText> *@
@*         <ValidationMessage For="@(() => User.Email)" /> *@
@*     </div> *@
@*      *@
@*     <div class="form-group" > *@
@*         <label for="password">Password</label> *@
@*         <InputText id="password" type="password" class="form-group"  @bind-Value="User.Password" ></InputText> *@
@*         <ValidationMessage For="@(() => User.Password)" /> *@
@*     </div> *@
@* *@
@*     <button type="submit" class="btn btn-primary">Login</button> *@
@* </EditForm> *@




@code {
    private LoginDto User { get; set; } = new LoginDto();
    private string email;
    private string password;
    
     async Task HandleLogin()
     {
         User.Email = email;
         User.Password = password;
        var response = await _account.LoginAccountAsync(User);
        
        if(response.Flag)
        {
            var customAuthStateProvider = (CustomAuthenticationProvider)AuthStateProvider;

            await customAuthStateProvider.UpdateAuthenticationState(new LocalStorageDto()
            {
                Token = response.Token,
                Refresh = response.RefreshToken
            });
            _navigation.NavigateTo("/" , forceLoad:true);
        }
        return;
    }
}