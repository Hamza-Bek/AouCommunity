@page "/login"
@using FluentValidation
@using Microsoft.AspNetCore.Components.Authorization
@inject IAccountRepository _account
@inject NavigationManager _navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IValidator<LoginDto> Validator
@using Blazored.FluentValidation

<div class="container-fluid">
    <EditForm class="form" Model="@User" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator/>
        <FluentValidationValidator Validator="Validator" />
        
        <img src="img/aoulogo.png" alt="Welcome Image" class="welcome-image mb-3"/>
        <h4 class="text-center">Welcome, Back!</h4>
        <div class="mb-3 mt-5">
            <label for="email" class="form-label">Email address</label>
            <InputText type="email" class="form-control" id="email" @bind-Value="@User.Email"/>
            <ValidationMessage For="@(() => @User.Email)" />
        </div>
        <div class="mb-3 mt-5">
            <label for="password" class="form-label">Password</label>
            <InputText type="password" class="form-control" id="password" @bind-Value="@User.Password"/>
            <ValidationMessage For="@(() => @User.Password)" />
        </div>
        <button type="submit" class="btn btn-primary mt-4">Login</button>
    </EditForm>
</div>


@code {
    private LoginDto User { get; set; } = new LoginDto();
    
     async Task HandleLogin()
     {
        var response = await _account.LoginAccountAsync(User);
        
        if(response.Flag)
        {
            var customAuthStateProvider = (CustomAuthenticationProvider)AuthStateProvider;

            await customAuthStateProvider.UpdateAuthenticationState(new LocalStorageDto()
            {
                Token = response.Token,
                Refresh = response.RefreshToken
            });
            _navigation.NavigateTo("/" , forceLoad:true);
        }
        return;
    }
}