@page "/"
@using Application.DTOs.Request.Entities
@using Application.Extension
@using Domain.Models.ChatModels
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject LocalStorageService LocalStorageService
@inject NavigationManager _navigation
@inject AvailableUserState state
@inject ReceiverChangeState _Receiver


<body >

<div class="chat-container">
    <div class="contact-card">
        <AuthorizeView>
            @if (AvailableUsers is not null)
            {
                @foreach (var contact in AvailableUsers)
                {
                    var currentUser = contact;
                    @if (currentUser.UserId != context.User.Claims.FirstOrDefault(i => i.Type == ClaimTypes.NameIdentifier)!.Value)
                    {
                        <div class="contact-item" @onclick="() => SelectContact(contact)">
                            <a class="nav-link text-success" @onclick="() => ChatUser(currentUser)">@contact.Fullname</a>
                        </div>
                    }
                }
            }
        
        </AuthorizeView>
    </div>

 
</div>

</body>
  


<script src="js/Chatbox.js" defer></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>

@code {
    public List<AvailableUserDto> AvailableUsers { get; set; } = [];
    private GroupChat GroupChat = new();
    private HubConnection? _hubConnection;
    public List<GroupChatDto> GroupChats { get; set; } = [];

    [CascadingParameter] public Task<AuthenticationState> authenticationState { get; set; }

    private AvailableUserDto SelectedContact;

    private void SelectContact(AvailableUserDto contact)
    {
        Console.WriteLine($"Selected Contact: {contact.Fullname}, {contact.UserId}");
        state.SetStates(contact.Fullname, contact.UserId); // Update the state
        SelectedContact = contact;
        _Receiver.ReceiverId = contact.UserId;
    }

    protected override async Task OnInitializedAsync()
    {
        var tokenModel = await LocalStorageService.GetModelFromToken();
        var accessToken = tokenModel?.Token;
        
        Console.Write(accessToken);

        if (string.IsNullOrEmpty(accessToken))
        {
            // Redirect to login if token is missing
            _navigation.NavigateTo("/login");
            return;
        }
        
        Console.WriteLine(accessToken);
        
        _hubConnection = new HubConnectionBuilder()
               .WithUrl("https://localhost:7201/chathub",  options =>
               {
                   options.AccessTokenProvider = () => Task.FromResult<string?>(accessToken);
               })
               .Build();

        _hubConnection.On<GroupChatDto>("ReceiveGroupMessages", (chat)
        =>
        {
            GroupChats.Add(chat);
            InvokeAsync(() => StateHasChanged());
        });

        _hubConnection.On<List<AvailableUserDto>>("NotifyAllClients", (users)
       =>
       {
           AvailableUsers = users;
           Console.WriteLine(users.Count);
           InvokeAsync(() => StateHasChanged());
       });           


        await _hubConnection.StartAsync();
        await GetCurrentUserAuthentication();
        
        var httpClient = new HttpClient();

        GroupChats = await httpClient.GetFromJsonAsync<List<GroupChatDto>>("https://localhost:7201/api/chats/group-chats");
        AvailableUsers = await httpClient.GetFromJsonAsync<List<AvailableUserDto>>("https://localhost:7201/api/chats/users");
    }

    private async Task GetCurrentUserAuthentication()
    {
        var user = (await authenticationState).User;
        if(user.Identity!.IsAuthenticated == true)
        {
            await _hubConnection!.SendAsync("AddAvailableUserAsync", new AvailableUser()
                {
                    UserId = user.Claims.FirstOrDefault(u => u.Type == ClaimTypes.NameIdentifier)!.Value
                });
        }
    }   

    private void ChatUser(AvailableUserDto model)
    {
        state.SetStates(model.Fullname!, model.UserId!);
        _navigation.NavigateTo("/chat"); 
    }
   
}