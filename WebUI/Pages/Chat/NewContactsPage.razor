@using System.ComponentModel
@using Application.DTOs.Request.Entities
@using Application.Extension
@using Domain.Models.ChatModels
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject LocalStorageService LocalStorageService
@inject NavigationManager _navigation
@inject AvailableUserState state
@inject ReceiverChangeState _Receiver

<AuthorizeView>
    @foreach (var contact in AvailableUsers)
    {
    var currentUser = contact;
    @if (currentUser.UserId != context.User.Claims.FirstOrDefault(i => i.Type == ClaimTypes.NameIdentifier)!.Value)
    {
    @if (UserProfilePhoto is null)
    {
    <div @onclick="() => OnSendRequestClicked(contact.UserId)">
        <div class="contact-body">
            <div class="circle-profile">@contact.Fullname[0]</div>
            <div class="contact-info">
                <div class="contact-user-name">
                    <a>@contact.Fullname</a>
                </div>

                <div class="last-message">
                    Hey, Ready for tonight?
                </div>
            </div>
        </div>
    </div>
    }
    }
    }

    <div class="new-contact">
        <div class="circle"><i class="fa-solid fa-user-plus" style="color: #ffffff;"></i></div>
    </div>
</AuthorizeView>


@code {
   
    private string _senderId = string.Empty;
    private string _receiverId = string.Empty;
    private string _statusMessage = string.Empty;
    private HubConnection _hubConnection;
   
    [Parameter]
    public string UserProfilePhoto { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }   
    
    private AvailableUserDto SelectedContact;
    public List<AvailableUserDto> AvailableUsers { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var tokenModel = await LocalStorageService.GetModelFromToken();
        var accessToken = tokenModel?.Token;

        if (string.IsNullOrEmpty(accessToken))
        {
            _navigation.NavigateTo("/login");
            return;
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7201/chathub", options =>
            {
                options.AccessTokenProvider = () => Task.FromResult<string?>(accessToken);
            }).Build();


        _hubConnection.On<List<AvailableUserDto>>("NotifyAllClients", (users) =>
        {
            AvailableUsers = users;
            InvokeAsync(() => StateHasChanged());
        });

        _hubConnection.On<ThreadRequest>("ReceiveThreadRequest", (request) =>
       {
           Console.WriteLine($"Received thread request from {request.SenderId}");
           InvokeAsync(() => StateHasChanged());
       });

        await _hubConnection.StartAsync();
        await GetCurrentUserAuthentication();

        var httpClient = new HttpClient();
        AvailableUsers = await httpClient.GetFromJsonAsync<List<AvailableUserDto>>("https://localhost:7201/api/chats/users");
    }

    private async Task SendRequest()
    {
        if (string.IsNullOrEmpty(_senderId) || string.IsNullOrEmpty(_receiverId))
        {
            _statusMessage = "Sender ID and Receiver ID are required.";
            return;
        }

        try
        {
            await SendThreadRequestAsync(_senderId, _receiverId);
            _statusMessage = "Thread request sent successfully!";
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error: {ex.Message}";
        }
    }
    
    private async Task SendRequest(string receiverId)
    {
        var senderId = (await authenticationState).User.Claims.FirstOrDefault(i => i.Type == ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(senderId) || string.IsNullOrEmpty(receiverId))
        {
            _statusMessage = "Sender ID and Receiver ID are required.";
            return;
        }

        try
        {
            await SendThreadRequestAsync(senderId, receiverId);
            _statusMessage = "Thread request sent successfully!";
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error: {ex.Message}";
        }
    }

    private async Task OnSendRequestClicked(string receiverId)
    {
        await SendRequest(receiverId);
    }

    private async Task SendThreadRequestAsync(string senderId, string receiverId)
    {
        try
        {
            var threadRequest = new ThreadRequest
            {
                SenderId = senderId,
                ReceiverId = receiverId
            };

            await _hubConnection.SendAsync("SendThreadRequest", threadRequest);
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error: {ex.Message}";
        }
    }

    private async Task GetCurrentUserAuthentication()
    {
        var user = (await authenticationState).User;
        if (user.Identity!.IsAuthenticated == true)
        {
            await _hubConnection!.SendAsync("AddAvailableUserAsync", new AvailableUser()
                {
                    UserId = user.Claims.FirstOrDefault(u => u.Type == ClaimTypes.NameIdentifier)!.Value
                });
        }
    }
    
    
}                    