@page "/individual"
@using System.Security.Claims
@using Application.DTOs.Request.Entities
@using Application.Extension
@using Domain.Models.ChatModels
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject LocalStorageService LocalStorageService
@inject NavigationManager _navigation
@inject  AvailableUserState state

<br/>
<br/>
<br/>
<div id="message"></div>
<br/>
<br/>
<div class="row">
    <div class="col-lg-12">
        <div class="card-header sticky">@state.Fullname</div>
        <div class="card" style="max-height: 65vh; min-height: 65vh; overflow: scroll;" id="chatContainer">
            <AuthorizeView>
                @foreach (var chat in IndividualChats)
                {
                    string position = chat.SenderName == context.User.Identity!.Name ? "align-self-end" : "align-self";
                    string style = chat.SenderName == context.User.Identity.Name ? "margin-right:10px" : "margin-left";
                    string Name = chat.SenderName == context.User.Identity.Name ? "You" : chat.SenderName!;
                    string Color = chat.SenderName == context.User.Identity.Name ? "text-primary" : "text-info";
                    <div class="card mt-1 mb-1 d-flex @position" 
                         style="width:500px; border-radius:10px; @style">
                        <div class="card-header">
                            <small class="@Color"><b>@Name</b></small><br/>
                            @chat.Message <br/>
                            <small class="text-muted">@chat.Date.ToString("dd MMM, yyy hh:mm tt")</small>    
                        </div>
                    </div>
                }
            </AuthorizeView>
        </div>
    </div>
</div>

<div class="row mt-3 mb-2">
    <div class="col-lg4"></div>
    <div class="col-lg4"></div>
    <div class="col-lg4">
        <EditForm Model="IndividualChatModel" OnValidSubmit="SendIndividualChat">
            <DataAnnotationsValidator/>
            <InputTextArea @bind-Value="IndividualChatModel.Message" class="form-control" placeholder="Message" />
            <button class="float-end btn btn-success mt-3" type="submit" >Send</button>
        </EditForm>
    </div>
</div>

<div class="row">
    <div class="col-lg-12 d-flex justify-content-center">
        @if (!IsConnected)
        {
            <div class="alert alert-danger">Chat Disconnected</div>    
        }
        else
        {
            <div class="alert alert-success">Chat Connected</div>
        }
    </div>
</div>

@code {
    [CascadingParameter] public Task<AuthenticationState> authenticationState { get; set; }
    private List<IndividualChatDto> IndividualChats { get; set; } = [];
    private IndividualChat IndividualChatModel { get; set; } = new IndividualChat();
    public HubConnection? _hubConnection { get; set; }
    private string _message;
    
    protected override async Task OnInitializedAsync()
    {
        var tokenModel = await LocalStorageService.GetModelFromToken();
        Console.WriteLine($"Token Model : {tokenModel}");
        var accessToken = tokenModel?.Token;
        Console.WriteLine($"Access Token : {accessToken}");
        
        if (string.IsNullOrEmpty(accessToken))
        {
            _navigation.NavigateTo("/login");
            return;
        }
        
        if (string.IsNullOrEmpty(state.ReceiverId))
        {
            Console.WriteLine("ReceiverId is null or empty on initialization.");
        }
        else
        {
            Console.WriteLine($"ReceiverId on initialization: {state.ReceiverId}");
        }
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7201/chathub",  options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(accessToken);
            })
            .Build();

        _hubConnection.On<IndividualChatDto>("ReceiveIndividualMessage", (individualChat) =>
        {
            IndividualChats.Add(individualChat);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        
        var httpClient = new HttpClient();

        var user = new RequestChatDto()
        {
            SenderId = ((await authenticationState).User).Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value,
            ReceiverId = state.ReceiverId
        };

        var response = await httpClient.PostAsJsonAsync("https://localhost:7201/api/chats/individual", user);
        
        if (response.IsSuccessStatusCode)
        {
            IndividualChats = await response.Content.ReadFromJsonAsync<List<IndividualChatDto>>() ?? new List<IndividualChatDto>();
        }
        else
        {
            Console.WriteLine($"Failed to load chats: {response.StatusCode}");
        }
    }

    
    public async void SendIndividualChat()
    {
        IndividualChatModel.ReceiverId = state.ReceiverId;
        IndividualChatModel.SenderId =
            ((await authenticationState).User).Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value;

        await _hubConnection!.SendAsync("AddIndividualChat", IndividualChatModel);

        var data = new IndividualChatDto()
        {
            SenderId = IndividualChatModel.SenderId,
            ReceiverId = IndividualChatModel.ReceiverId,
            Message = IndividualChatModel.Message,
            Date = IndividualChatModel.Date,
            SenderName = (await authenticationState).User.Identity!.Name,
            ReceiverName = state.Fullname
        };
        
        Console.WriteLine(data.ReceiverId);
        
        IndividualChats.Add(data);
        IndividualChatModel = new();
    }
    
    private bool IsConnected
    {
        get
        {
            return _hubConnection?.State == HubConnectionState.Connected;
        }
    }
}
